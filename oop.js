/*

// 1. JavaScript Object 

     // ЁЯЯк Variable type properties
     // ЁЯЯк Method properties
     // ЁЯЯк Object properties
     // ЁЯЯк Array properties

     // There are 3 ways to create objects.



     //  a- By object literal

     var person={
        fName: "Arabiya Al ",
        lName: "Anas",
        age: "3 Month 9 Days",
        city: "Mirpur Dhaka",
        fullName: function(){
            console.log("My name is"+" "+ this.fName + this.lName);
            return ( `My name is this.${person.fName} ${person.lName}` );
        },
     }
     person.fullName();
     console.log(person.fullName());


     //  b- By creating instance of Object

        var person= new Object();
        person.fName = "Arabiya Al ";
        person.lName = "Anas";
        person.age = "3 Month 9 Days";
        person.city = "Mirpur Dhaka";
        person.fullName= function(){
            return ( `My name is ${person.fName}${person.lName}`);
        }

        console.log(person.fullName());

     //  c- By using constructor function


     function person(){
        this.fName = "Arabiya Al ";
        this.lName = "Anas";
        this.age = "3 Month 9 Days";
        this.city = "Mirpur Dhaka";
        this.fullName= function(){
            return ( `My name is ${this.fName}${this.lName}`);
        }
     }

     var personName= new person();
     console.log(personName.fullName());


// 2. Class
        // ЁЯЯк Classes are blueprints of an Object
        // ЁЯЯк Class is a template while Objects are instances of the class
        // ЁЯЯк Using let or var to declare variables inside a class is unnecessary because class
        // properties are automatically scoped to the class instance and don't require explicit
        // variable declarations

        ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржмрж╛рж░ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред ржЖржорж░рж╛ ржпржжрж┐ ржПржХрж╛ржзрж┐ржХржмрж╛рж░ ржХрзНрж▓рж╛рж╕ ржШрзЛрж╖ржгрж╛ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐, ржПржЯрж┐ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржирж┐ржХрзНрж╖рзЗржк ржХрж░рзЗред



     class person {
        fName="Arabia Al ";
        lName="Anas";
        fullName= function(){
            return (`My son name is ${this.fName}${this.lName}`);
        }
     }

     var person1= new person();
     console.log(person1.fullName());




        //  ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ рж╕ржВржЬрзНржЮрж╛ржпрж╝рж┐ржд ржХрж░рж╛рж░ ржЖрж░рзЗржХржЯрж┐ ржЙржкрж╛ржпрж╝ рж╣рж▓ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред
        //  ржПржЦрж╛ржирзЗ, ржХрзНрж▓рж╛рж╕рзЗрж░ ржирж╛ржо ржмрж░рж╛ржжрзНржж ржХрж░рж╛ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ ржиржпрж╝ред
        //  рж╕рзБрждрж░рж╛ржВ, ржХрзНрж▓рж╛рж╕ ржПржХрзНрж╕ржкрзНрж░рзЗрж╢ржи ржирж╛ржо ржмрж╛ ржирж╛ржорж╣рзАржи рж╣рждрзЗ ржкрж╛рж░рзЗ
        //  ржПржнрж╛ржмрзЗ ржЖржкржирж┐ ржХрзНрж▓рж╛рж╕ ржкрзБржирж░рж╛ржпрж╝ ржШрзЛрж╖ржгрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи


    var person1= class {
            fName="Arabia Al ";
            lName="Anas";
            fullName= function(){
                return (`My son name is ${this.fName}${this.lName}`);
            }
        }

        var person1= new person1();
        console.log(person1.fullName());

    //  ржПржнрж╛ржмрзЗ ржЖржкржирж┐ ржХрзНрж▓рж╛рж╕ ржкрзБржирж░рж╛ржпрж╝ ржШрзЛрж╖ржгрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
        var person1= class {
            fName="Arabia ";
            lName="Anas";
            fullName= function(){
                return (`My son name is ${this.fName}${this.lName}`);
            }
        }

        var person1= new person1();
        console.log(person1.fullName());



// 3. Constructor
     // ЁЯЯк Class constructor is a magic method
     // ЁЯЯк Constructor execute automatically when object is created
     // ЁЯЯк Constructor can take parameter
     // ЁЯЯк Constructor method can't return any result

        class addNum{
                constructor(a,b){
                    console.log(a+b);
                }
            }
            const addNum1= new addNum(20,20);


// 4. Static Keyword

        // ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржХрзАржУржпрж╝рж╛рж░рзНржбржЯрж┐ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕рзЗрж░ ржЬржирзНржп рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржкржжрзНржзрждрж┐ ржПржмржВ ржмрзИрж╢рж┐рж╖рзНржЯрзНржпржЧрзБрж▓рж┐ рж╕ржВржЬрзНржЮрж╛ржпрж╝рж┐ржд ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝
        // рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ рж╕ржжрж╕рзНржпржжрзЗрж░ (ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржПржмржВ ржкржжрзНржзрждрж┐) рждрж╛ржжрзЗрж░ ржХрзНрж▓рж╛рж╕ ржЗржирж╕рзНржЯрзНржпрж╛ржирзНржЯ ржирж╛ ржХрж░рзЗржЗ ржбрж╛ржХрж╛ рж╣ржпрж╝ ржПржмржВ ржХрзНрж▓рж╛рж╕ ржЗржирзНрж╕ржЯрзНржпрж╛ржирзНрж╕рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржбрж╛ржХрж╛ ржпрж╛ржпрж╝ ржирж╛

        class person{
           static fName= "Arabia Al ";
           static lName= "Anas";
           static age=4;
           static bio= function(){
                return (`My son name is ${this.fName} ${this.lName} and he is ${this.age} Months old`);
            }
        }

        // var person1= new person();
        console.log(person.bio());
        // console.log(person.age);

        
// 5. Inheritance
        Keyword extends is used to create inherit relationship between class
        ЁЯЯк For inherit relationship child class can use parent class properties

        class parent{
            firstName="Arabia Al";
            lastName="Anas";
            getFullName(){
                return (`This is ${this.firstName} ${this.lastName}`)
            }
        }
        class child extends parent {

        }

        // var parent1= new parent();
        // console.log(parent1.getFullName());
        var child1= new child();
        console.log(child1.getFullName());

// 6. Overriding
        ЁЯЯк Overriding works for inheritance relationship
        ЁЯЯк When child class change his parent properties , that is overriding

        class parent {
            firstName="Arabia";
            lastName="Anas";
            getFullName(){
                return (`This is ${this.firstName} ${this.lastName}`);   
            }
        }

        class child extends parent {
            firstName="Arabia Al";
        }

        let child1= new child();
        console.log(child1.getFullName());


        // let parent1= new parent();
        // console.log(parent1.getFullName());
  
// 7. Inheritance Constructor
        ЁЯЯк Constructor inside only parent class
        ЁЯЯк Constructor inside only parent class pass parameters
        ЁЯЯк Constructor inside only child class
        ЁЯЯк Constructor inside only child class pass parameters
        ЁЯЯк Constructor inside both parent & child class
        ЁЯЯк Constructor inside both parent & child class pass parameters

        class parent{
            constructor(msg,a,b){
                console.log("Iam a constructor of parent class");
                console.log(msg+" "+(a+b));
            }
        }

        class child extends parent{

         constructor(msg,a,b){
            super();
            console.log(msg+" "+(a+b));
            
         }

        }

        const parent1=new parent();
        const child1= new child("Iam a constructor of Parent class",10,10);

//8. Inheritance Static Properties

        ЁЯЯк When a class extends another, it inherits the parent class's static properties and methods

        class parent {
            static firstName="Arabia";
            static lastName="Anas";
        }
        class child extends parent {
            static firstName="Arabia Al";
        }
        console.log(parent.firstName);
        console.log(parent.lastName);

// 9. Method Overloading   

// 10. Abstraction
        ЁЯЯк Keyword "abstract" use for class abstraction
        ЁЯЯк You can't create object for abstract class
        ЁЯЯк Abstract class Always needs its inherited child class to perform
        ЁЯЯк JavaScript does not have built-in support for abstract

11. Polymorphism
        ЁЯЯк The polymorphism is a core concept of an object-oriented paradigm
        that provides a way to perform a single action in different forms.
        ЁЯЯк We already know about Inheritance, Overriding, Overloading - those concepts together represent polymorphism

// 12 Encapsulation

            // * Encapsulation Using Closures *

        function profile(){
            let details="Profile Data";
            return {
                updated:function(){
                    console.log("Profile Updated Proccess");
                },
                photoUpload:function(){
                    console.log("Photo Uploaded Proccess");
                },
                login:function(){
                    console.log("Login Proccess");
                },
                register:function(){
                    console.log("Register Proccess");
                },
                reset:function(){
                    console.log("Reset Proccess");
                }
            }
        }
        const profile1= new profile();
        profile1.photoUpload();


         // * Using Constructor Functions *


        function Car(make, model) {
            let mileage = 0;
            this.getMake = function() {
            return make;
            };
            this.getModel = function() {
            return model;
            };
            this.getMileage = function() {
            return mileage;
            };
            this.drive = function(distance) {
            mileage += distance;
            };
            }
            const myCar = new Car('Toyota', 'Corolla');
            console.log(myCar.getMake()); // Output: Toyota



         //   * Using ES6 Classes *

        class bankAccount{
        #balance=0;
            diposite (amount){
                this.#balance=this.#balance+amount;
            }
            widthrow(amount){
                if (amount <=this.#balance){
                    this.#balance-=amount;
                } else {
                    console.log("Insufficient Balance");
                }
            }
            getBalance(){
                return this.#balance;
            }
        }

        const acc= new bankAccount();
        acc.diposite(500);
        acc.widthrow(270);
        console.log(acc.getBalance());
        console.log(acc.balance); // show undifined balance
*/










